axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2),y=(loadings[,2]*2.5),label=row.names(loadings)),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2),y=(loadings[,2]*2),label=row.names(loadings)),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.2),y=(loadings[,2]*2),label=row.names(loadings)),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.4),y=(loadings[,2]*2),label=row.names(loadings)),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.35),y=(loadings[,2]*2),label=row.names(loadings)),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
row.names(loadings)
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.35),y=(loadings[,2]*2),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+1),y=(loadings[,2]*2),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.8),y=(loadings[,2]*2),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.5),y=(loadings[,2]*2),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.3),y=(loadings[,2]*2),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.3),y=(loadings[,2]*2+0.1),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.3),y=(loadings[,2]*2+0.16),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
# Plotting PCA #
Suppl.Fig2<-ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.3),y=(loadings[,2]*2+0.16),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 16, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 12))
ggsave("Suppl. Fig. 2.png",Suppl.Fig2,dpi=600,height=8,width=8,units=c("cm"))
# Plotting PCA #
Suppl.Fig2<-ggplot()+
geom_point(mapping=aes(x=scores[,1],y=scores[,2]),size=2,alpha=0.15)+
xlab("PC1 (53.41%)")+  ylab("PC2 (32.93%)")+
geom_segment(aes(x=0,xend=loadings[,1]*2,y=0,yend=loadings[,2]*2),
arrow = arrow(length = unit(0.5, "cm")),colour="blue",
size=0.8,alpha=0.5,inherit.aes=FALSE)+
geom_text(aes(x=(loadings[,1]*2+0.3),y=(loadings[,2]*2+0.16),label=c("Depth","Salinity","Temperature")),
size=4,color="blue",fontface="bold",alpha=0.5)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5), # opcoes graficas
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 14, face = "bold"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white"),
legend.text = element_text(face = "bold", colour = "black", size = 10))
ggsave("Suppl. Fig. 2.png",Suppl.Fig2,dpi=600,height=6,width=6,units=c("cm"))
ggsave("Suppl. Fig. 2.png",Suppl.Fig2,dpi=600,height=8,width=8,units=c("cm"))
ggsave("Suppl. Fig. 2.png",Suppl.Fig2,dpi=600,height=10,width=10,units=c("cm"))
write.table(scores,"env_pcs.txt")
### Pacotes utilizados ###
library(reshape)
### Dados brutos e construção das planilhas ###
data<-read.table("trawling data.txt",header=T)
data
comm<-cast(data[,c(1:3)],trawl~species,value='pres',fun.aggregate=mean)
comm[is.na(comm)]<-0
row.names(comm)<-comm$trawl
comm<-comm[,-1]
comm
### Pacotes utilizados ###
library(reshape)
### Importing dataset and building Site x Sp. matrix ###
data<-read.table("trawling data.txt",header=T)
comm<-cast(data[,c(1:3)],trawl~species,value='pres',fun.aggregate=mean)
comm[is.na(comm)]<-0
row.names(comm)<-comm$trawl
comm<-comm[,-1]
install.packages("ecospat",dependencies=TRUE)
ecospat.Cscore01 <- function(data.in,npermut,outpath)
{
# C-coef Observed matrix
cat("Computing observed co-occurence matrix", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
spec.occ <- data.matrix(data.in)
####  C score #############
coocc<-t(spec.occ)%*%spec.occ  # nb of checkboard units
n.spec=dim(coocc)[1]
mat1<-array(apply(spec.occ,MAR=2,sum),dim=c(n.spec,n.spec))
mat2<-t(array(apply(spec.occ,MAR=2,sum),dim=c(n.spec,n.spec)))
mat.obs.c.coef <- ((mat1 - coocc)*(mat2 - coocc))/(mat1*mat2) # observed c score
df.obs.c.coef <- data.frame(Col = rep(1:ncol(mat.obs.c.coef),each=ncol(mat.obs.c.coef)),Row = rep(1:nrow(mat.obs.c.coef),
nrow(mat.obs.c.coef)),Sp1 = rep(colnames(mat.obs.c.coef),each=ncol(mat.obs.c.coef)),
Sp2 = rep(rownames(mat.obs.c.coef),nrow(mat.obs.c.coef)),Co.Occ = c(mat.obs.c.coef)) # dataframe with cscore for each species pair
v.diago.inf <- c(rownames(df.obs.c.coef)[df.obs.c.coef[,1]>df.obs.c.coef[,2]],rownames(df.obs.c.coef)[df.obs.c.coef[,1]==df.obs.c.coef[,2]])# Remove identical combinations of species
df.obs.c.coef <- df.obs.c.coef[-as.numeric(v.diago.inf),]
CscoreTot<-mean(df.obs.c.coef$Co.Occ)
# Matrix to store the permuations
mat.perm <- matrix(0,nrow(df.obs.c.coef),npermut, dimnames = list(c(paste(df.obs.c.coef[,3],df.obs.c.coef[,4])),c(1:npermut)))
# Permutations C-coef
cat("Computing permutations", "\n",append = F)
cat(".............", "\n",append = F)
for (i in 1:npermut)
{
if (i == 1)
{
cat(npermut ," permutations to go", "\n",append = F)
cat(".............", "\n",append = F)
}
if (i == npermut / 2)
{
cat(npermut / 2," permutations to go", "\n",append = F)
cat(".............", "\n",append = F)
}
spec.occ.perm1<-data.matrix(data.in)
spec.occ.perm1 <- permatswap(spec.occ.perm1,fixedmar="both",mtype="prab",time=1) # row/column sums are preserved
# time=1 : separate swapping sequence that always begins with the original matrix
spec.occ.perm <- as.matrix(spec.occ.perm1[[3]][[1]] )
coocc.perm <- t(spec.occ.perm)%*%spec.occ.perm
mat1.perm <- array(apply(spec.occ.perm,MAR=2,sum),dim=c(n.spec,n.spec))
mat2.perm <- t(array(apply(spec.occ.perm,MAR=2,sum),dim=c(n.spec,n.spec)))
mat.obs.c.coef.perm <- ((mat1.perm - coocc.perm)*(mat2.perm - coocc.perm))/(mat1.perm*mat2.perm)
df.obs.c.coef.perm <- data.frame(Col = rep(1:ncol(mat.obs.c.coef.perm),each=ncol(mat.obs.c.coef.perm)),Row = rep(1:nrow(mat.obs.c.coef.perm),
nrow(mat.obs.c.coef.perm)),Sp1 = rep(colnames(mat.obs.c.coef),each=ncol(mat.obs.c.coef.perm)),
Sp2 = rep(rownames(mat.obs.c.coef),nrow(mat.obs.c.coef.perm)),Co.Occ = c(mat.obs.c.coef.perm))
# Remove identical combinations of species (same Co-occ coef) and the diagonal (Co-occ coeff = 0)
df.obs.c.coef.perm <- df.obs.c.coef.perm[-as.numeric(v.diago.inf),]
# Store result of permuation
mat.perm[,i] <- df.obs.c.coef.perm[,5]
}
## for the whole community
vec.CScore.tot<-as.vector(apply(mat.perm,MAR=2,mean)) # C-score for all null communities (mean on the columns)
SimulatedCscore<-mean(vec.CScore.tot) # mean of Simulation C-score: Simulated C-score
sd.SimulatedCscore<-sd(vec.CScore.tot) # standard deviation of null communities
Zscore<-(CscoreTot-SimulatedCscore)/sd.SimulatedCscore # standardized effect size
randtest.less<-as.randtest(vec.CScore.tot, CscoreTot, alter="less")
pval.less<-randtest.less$pvalue
randtest.greater<-as.randtest(vec.CScore.tot, CscoreTot, alter="greater")
pval.greater<-randtest.greater$pvalue
plot(randtest.greater, xlab= "Simulated C-scores",main=paste("", sep=""))
# Calculate P-values based on random distribution
mat.pval <- matrix(0,nrow(mat.perm),4,dimnames = list(rownames(mat.perm),c("Obs.Co.Occ","Zscore","pval_less","pval_greater")))
mat.pval[,1] <- df.obs.c.coef[,5]
cat("Computing P-values", "\n",append = F)
cat(".............", "\n",append = F)
for (k in 1:nrow(mat.perm))
{
mat.pval[k,2]<-	(df.obs.c.coef[k,5]-mean(mat.perm[k,]))/sd(mat.perm[k,])
randtest<-as.randtest(sim=mat.perm[k,], obs=df.obs.c.coef[k,5], alter="less")
mat.pval[k,3]<-randtest$pvalue
randtest<-as.randtest(sim=mat.perm[k,], obs=df.obs.c.coef[k,5], alter="greater")
mat.pval[k,4]<-randtest$pvalue
}
# Exporting Co-occ matrix
cat("Exporting dataset", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
hist(as.vector(mat.pval[,2]), xlab="Zscore", main = paste(""))
abline(v=c(2,-2),col = "red")
mat.pval.names<-data.frame(df.obs.c.coef[,3:4],mat.pval,df.obs.c.coef.perm[,5])
mat.pval.names2<-data.frame(mat.pval.names[,1:3],mat.pval.names[,7],mat.pval.names[,4:6])
names(mat.pval.names2)[3]<-"obs.C-score"
names(mat.pval.names2)[4]<-"exp.C-score"
write.table(mat.pval.names2,file=paste(outpath,"\\Cscores01.txt", sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
tab<-mat.pval.names2
v<-c(0)
for (i in 1:nrow(tab)){
if (tab[i,6]<=0.05||tab[i,7]<=0.05){
v<-c(v,i)
}
}
m<-data.frame()
for(j in 1:length(v)){
m<-rbind(m,tab[v[j],])
}
m1<-na.omit(m)
write.table(m1,file=paste(outpath,"\\Sign_Cscores01.txt",sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
write.table(mat.perm, file=paste(outpath,"\\MatrixPermutations01.txt",sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
l<-list(ObsCscoreTot=CscoreTot, SimCscoreTot=SimulatedCscore, PVal.less=pval.less,PVal.greater=pval.greater,Z.score=Zscore)
return(l)
cat("Computations finished!", "\n",append = F)
# END FUNCTION
}
### C-score para os nossos dados ###
data.in <- comm
nperm <- 100
outpath <- getwd()
res <- ecospat.Cscore01(comm,nperm,outpath)
install.packages("ecospat",dependencies=TRUE)
install.packages("ecospat",dependencies=TRUE)
install.packages("ecospat", dependencies = TRUE)
install.packages("ecospat")
data<-read.table("trawling data.txt",header=T)
comm<-cast(data[,c(1:3)],trawl~species,value='pres',fun.aggregate=mean)
comm[is.na(comm)]<-0
row.names(comm)<-comm$trawl
comm<-comm[,-1]
### Pacotes utilizados ###
library(reshape)
library(vegan)
library(ade4)
library(Rmisc)
ecospat.Cscore01 <- function(data.in,npermut,outpath)
{
# C-coef Observed matrix
cat("Computing observed co-occurence matrix", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
spec.occ <- data.matrix(data.in)
####  C score #############
coocc<-t(spec.occ)%*%spec.occ  # nb of checkboard units
n.spec=dim(coocc)[1]
mat1<-array(apply(spec.occ,MAR=2,sum),dim=c(n.spec,n.spec))
mat2<-t(array(apply(spec.occ,MAR=2,sum),dim=c(n.spec,n.spec)))
mat.obs.c.coef <- ((mat1 - coocc)*(mat2 - coocc))/(mat1*mat2) # observed c score
df.obs.c.coef <- data.frame(Col = rep(1:ncol(mat.obs.c.coef),each=ncol(mat.obs.c.coef)),Row = rep(1:nrow(mat.obs.c.coef),
nrow(mat.obs.c.coef)),Sp1 = rep(colnames(mat.obs.c.coef),each=ncol(mat.obs.c.coef)),
Sp2 = rep(rownames(mat.obs.c.coef),nrow(mat.obs.c.coef)),Co.Occ = c(mat.obs.c.coef)) # dataframe with cscore for each species pair
v.diago.inf <- c(rownames(df.obs.c.coef)[df.obs.c.coef[,1]>df.obs.c.coef[,2]],rownames(df.obs.c.coef)[df.obs.c.coef[,1]==df.obs.c.coef[,2]])# Remove identical combinations of species
df.obs.c.coef <- df.obs.c.coef[-as.numeric(v.diago.inf),]
CscoreTot<-mean(df.obs.c.coef$Co.Occ)
# Matrix to store the permuations
mat.perm <- matrix(0,nrow(df.obs.c.coef),npermut, dimnames = list(c(paste(df.obs.c.coef[,3],df.obs.c.coef[,4])),c(1:npermut)))
# Permutations C-coef
cat("Computing permutations", "\n",append = F)
cat(".............", "\n",append = F)
for (i in 1:npermut)
{
if (i == 1)
{
cat(npermut ," permutations to go", "\n",append = F)
cat(".............", "\n",append = F)
}
if (i == npermut / 2)
{
cat(npermut / 2," permutations to go", "\n",append = F)
cat(".............", "\n",append = F)
}
spec.occ.perm1<-data.matrix(data.in)
spec.occ.perm1 <- permatswap(spec.occ.perm1,fixedmar="both",mtype="prab",time=1) # row/column sums are preserved
# time=1 : separate swapping sequence that always begins with the original matrix
spec.occ.perm <- as.matrix(spec.occ.perm1[[3]][[1]] )
coocc.perm <- t(spec.occ.perm)%*%spec.occ.perm
mat1.perm <- array(apply(spec.occ.perm,MAR=2,sum),dim=c(n.spec,n.spec))
mat2.perm <- t(array(apply(spec.occ.perm,MAR=2,sum),dim=c(n.spec,n.spec)))
mat.obs.c.coef.perm <- ((mat1.perm - coocc.perm)*(mat2.perm - coocc.perm))/(mat1.perm*mat2.perm)
df.obs.c.coef.perm <- data.frame(Col = rep(1:ncol(mat.obs.c.coef.perm),each=ncol(mat.obs.c.coef.perm)),Row = rep(1:nrow(mat.obs.c.coef.perm),
nrow(mat.obs.c.coef.perm)),Sp1 = rep(colnames(mat.obs.c.coef),each=ncol(mat.obs.c.coef.perm)),
Sp2 = rep(rownames(mat.obs.c.coef),nrow(mat.obs.c.coef.perm)),Co.Occ = c(mat.obs.c.coef.perm))
# Remove identical combinations of species (same Co-occ coef) and the diagonal (Co-occ coeff = 0)
df.obs.c.coef.perm <- df.obs.c.coef.perm[-as.numeric(v.diago.inf),]
# Store result of permuation
mat.perm[,i] <- df.obs.c.coef.perm[,5]
}
## for the whole community
vec.CScore.tot<-as.vector(apply(mat.perm,MAR=2,mean)) # C-score for all null communities (mean on the columns)
SimulatedCscore<-mean(vec.CScore.tot) # mean of Simulation C-score: Simulated C-score
sd.SimulatedCscore<-sd(vec.CScore.tot) # standard deviation of null communities
Zscore<-(CscoreTot-SimulatedCscore)/sd.SimulatedCscore # standardized effect size
randtest.less<-as.randtest(vec.CScore.tot, CscoreTot, alter="less")
pval.less<-randtest.less$pvalue
randtest.greater<-as.randtest(vec.CScore.tot, CscoreTot, alter="greater")
pval.greater<-randtest.greater$pvalue
plot(randtest.greater, xlab= "Simulated C-scores",main=paste("", sep=""))
# Calculate P-values based on random distribution
mat.pval <- matrix(0,nrow(mat.perm),4,dimnames = list(rownames(mat.perm),c("Obs.Co.Occ","Zscore","pval_less","pval_greater")))
mat.pval[,1] <- df.obs.c.coef[,5]
cat("Computing P-values", "\n",append = F)
cat(".............", "\n",append = F)
for (k in 1:nrow(mat.perm))
{
mat.pval[k,2]<-	(df.obs.c.coef[k,5]-mean(mat.perm[k,]))/sd(mat.perm[k,])
randtest<-as.randtest(sim=mat.perm[k,], obs=df.obs.c.coef[k,5], alter="less")
mat.pval[k,3]<-randtest$pvalue
randtest<-as.randtest(sim=mat.perm[k,], obs=df.obs.c.coef[k,5], alter="greater")
mat.pval[k,4]<-randtest$pvalue
}
# Exporting Co-occ matrix
cat("Exporting dataset", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
cat(".............", "\n",append = F)
hist(as.vector(mat.pval[,2]), xlab="Zscore", main = paste(""))
abline(v=c(2,-2),col = "red")
mat.pval.names<-data.frame(df.obs.c.coef[,3:4],mat.pval,df.obs.c.coef.perm[,5])
mat.pval.names2<-data.frame(mat.pval.names[,1:3],mat.pval.names[,7],mat.pval.names[,4:6])
names(mat.pval.names2)[3]<-"obs.C-score"
names(mat.pval.names2)[4]<-"exp.C-score"
write.table(mat.pval.names2,file=paste(outpath,"\\Cscores01.txt", sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
tab<-mat.pval.names2
v<-c(0)
for (i in 1:nrow(tab)){
if (tab[i,6]<=0.05||tab[i,7]<=0.05){
v<-c(v,i)
}
}
m<-data.frame()
for(j in 1:length(v)){
m<-rbind(m,tab[v[j],])
}
m1<-na.omit(m)
write.table(m1,file=paste(outpath,"\\Sign_Cscores01.txt",sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
write.table(mat.perm, file=paste(outpath,"\\MatrixPermutations01.txt",sep=""),sep="\t",append=F,row.names=F,col.names=T,quote=F)
l<-list(ObsCscoreTot=CscoreTot, SimCscoreTot=SimulatedCscore, PVal.less=pval.less,PVal.greater=pval.greater,Z.score=Zscore)
return(l)
cat("Computations finished!", "\n",append = F)
# END FUNCTION
}
### C-score para os nossos dados ###
data.in <- comm
### Importing dataset and building Site x Sp. matrix ###
data<-read.table("trawling data.txt",header=T)
comm<-cast(data[,c(1:3)],trawl~species,value='pres',fun.aggregate=mean)
comm[is.na(comm)]<-0
row.names(comm)<-comm$trawl
comm<-comm[,-1]
nperm <- 100
outpath <- getwd()
res <- ecospat.Cscore01(comm,nperm,outpath)
library(vegan)
